cmake_minimum_required(VERSION 3.6)

project(Mogren)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/..)

set(CMAKE_CXX_STANDARD 14)

if (ANDROID)
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++14 -fexceptions -frtti -D__ANDROID__")
endif()

add_definitions(-D_UNICODE -DUNICODE)

source_group(" " .*)
source_group(Framework\\Animation Framework/Animation/[^/\\]*)
source_group(Framework\\Audio Framework/Audio/[^/\\]*)
source_group(Framework\\Audio\\NativeInterface Framework/Audio/NativeInterface/[^/\\]*)
source_group(Framework\\Collections Framework/Collections/[^/\\]*)
source_group(Framework\\Common Framework/Common/[^/\\]*)
source_group(Framework\\App Framework/App/[^/\\]*)
source_group(Framework\\Common\\NativeInterface Framework/Common/NativeInterface/[^/\\]*)
source_group(Framework\\Graphics Framework/Graphics/[^/\\]*)
source_group(Framework\\Graphics\\NativeInterface Framework/Graphics/NativeInterface/[^/\\]*)
source_group(Framework\\Graphics\\PrimitiveTypes Framework/Graphics/PrimitiveTypes/[^/\\]*)
source_group(Framework\\Graphics\\Text Framework/Graphics/Text/[^/\\]*)
source_group(Framework\\Input Framework/Input/[^/\\]*)
source_group(Framework\\IO Framework/IO/[^/\\]*)
source_group(Framework\\Localization Framework/Localization/[^/\\]*)
source_group(Framework\\Logging Framework/Logging/[^/\\]*)
source_group(Framework\\Logging\\NetworkLogWriter Framework/Logging/NetworkLogWriter/[^/\\]*)
source_group(Framework\\Math Framework/Math/[^/\\]*)
source_group(Framework\\ResourceManagement Framework/ResourceManagement/[^/\\]*)
source_group(Framework\\ResourceManagement\\NativeInterface Framework/ResourceManagement/NativeInterface/[^/\\]*)
source_group(Framework\\Settings Framework/Settings/[^/\\]*)
source_group(Framework\\Settings\\NativeInterface Framework/Settings/NativeInterface/[^/\\]*)
source_group(Framework\\Threading Framework/Threading/[^/\\]*)
source_group(Implementation\\Audio.OpenAL Implementation/Audio.OpenAL/[^/\\]*)
source_group(Implementation\\Core.Android Implementation/Core.Android/[^/\\]*)
source_group(Implementation\\Core.Windows Implementation/Core.Windows/[^/\\]*)
source_group(Implementation\\Graphics.DirectX Implementation/Graphics.DirectX/[^/\\]*)
source_group(Implementation\\Graphics.OpenGL Implementation/Graphics.OpenGL/[^/\\]*)
source_group(Implementation\\Graphics.OpenGL\\Windows Implementation/Graphics.OpenGL/Windows/[^/\\]*)
source_group(Implementation\\Logging.Android Implementation/Logging.Android/[^/\\]*)
source_group(Implementation\\ResourceManagement.Android Implementation/ResourceManagement.Android/[^/\\]*)
source_group(Implementation\\ResourceManagement.Windows Implementation/ResourceManagement.Windows/[^/\\]*)
source_group(Implementation\\Settings.Android Implementation/Settings.Android/[^/\\]*)
source_group(Implementation\\Settings.Windows Implementation/Settings.Windows/[^/\\]*)
source_group(Implementation\\EntryPoint.Windows Implementation/EntryPoint.Windows/[^/\\]*)
source_group(Implementation\\EntryPoint.Android Implementation/EntryPoint.Android/[^/\\]*)
source_group(ThirdParty\\freeglut\\include ThirdParty/freeglut/include/[^/\\]*)
source_group(ThirdParty\\openal.android\\include\\AL ThirdParty/openal.android/include/AL/[^/\\]*)
source_group(ThirdParty\\openal.windows\\include\\AL ThirdParty/openal.windows/include/AL/[^/\\]*)
source_group(ThirdParty\\stb_image ThirdParty/stb_image/[^/\\]*)
source_group(ThirdParty\\stb_vorbis ThirdParty/stb_vorbis/[^/\\]*)
source_group(ThirdParty\\TinyXML2 ThirdParty/TinyXML2/[^/\\]*)
source_group(ThirdParty\\utf8 ThirdParty/utf8/[^/\\]*)
source_group(ThirdParty\\utf8\\utf8 ThirdParty/utf8/utf8/[^/\\]*)

file(GLOB SRC_LIST "Framework/Animation/*.[ch]" "Framework/Animation/*.[ch]pp")
file(GLOB SRC_LIST_TMP "Framework/Audio/*.[ch]" "Framework/Audio/*.[ch]pp")
list(APPEND SRC_LIST ${SRC_LIST_TMP})
file(GLOB SRC_LIST_TMP "Framework/Audio/NativeInterface/*.[ch]" "Framework/Audio/NativeInterface/*.[ch]pp")
list(APPEND SRC_LIST ${SRC_LIST_TMP})
file(GLOB SRC_LIST_TMP "Framework/Collections/*.[ch]" "Framework/Collections/*.[ch]pp")
list(APPEND SRC_LIST ${SRC_LIST_TMP})
file(GLOB SRC_LIST_TMP "Framework/Common/*.[ch]" "Framework/Common/*.[ch]pp")
list(APPEND SRC_LIST ${SRC_LIST_TMP})
file(GLOB SRC_LIST_TMP "Framework/Common/NativeInterface/*.[ch]" "Framework/Common/NativeInterface/*.[ch]pp")
list(APPEND SRC_LIST ${SRC_LIST_TMP})
file(GLOB SRC_LIST_TMP "Framework/App/*.[ch]" "Framework/App/*.[ch]pp")
list(APPEND SRC_LIST ${SRC_LIST_TMP})
file(GLOB SRC_LIST_TMP "Framework/Graphics/*.[ch]" "Framework/Graphics/*.[ch]pp")
list(APPEND SRC_LIST ${SRC_LIST_TMP})
file(GLOB SRC_LIST_TMP "Framework/Graphics/NativeInterface/*.[ch]" "Framework/Graphics/NativeInterface/*.[ch]pp")
list(APPEND SRC_LIST ${SRC_LIST_TMP})
file(GLOB SRC_LIST_TMP "Framework/Graphics/PrimitiveTypes/*.[ch]" "Framework/Graphics/PrimitiveTypes/*.[ch]pp")
list(APPEND SRC_LIST ${SRC_LIST_TMP})
file(GLOB SRC_LIST_TMP "Framework/Graphics/Text/*.[ch]" "Framework/Graphics/Text/*.[ch]pp")
list(APPEND SRC_LIST ${SRC_LIST_TMP})
file(GLOB SRC_LIST_TMP "Framework/Input/*.[ch]" "Framework/Input/*.[ch]pp")
list(APPEND SRC_LIST ${SRC_LIST_TMP})
file(GLOB SRC_LIST_TMP "Framework/IO/*.[ch]" "Framework/IO/*.[ch]pp")
list(APPEND SRC_LIST ${SRC_LIST_TMP})
file(GLOB SRC_LIST_TMP "Framework/Localization/*.[ch]" "Framework/Localization/*.[ch]pp")
list(APPEND SRC_LIST ${SRC_LIST_TMP})
file(GLOB SRC_LIST_TMP "Framework/Logging/*.[ch]" "Framework/Logging/*.[ch]pp")
list(APPEND SRC_LIST ${SRC_LIST_TMP})
#file(GLOB SRC_LIST_TMP "Framework/Logging/NetworkLogWriter/*.[ch]" "Framework/Logging/NetworkLogWriter/*.[ch]pp")
#list(APPEND SRC_LIST ${SRC_LIST_TMP})
file(GLOB SRC_LIST_TMP "Framework/Math/*.[ch]" "Framework/Math/*.[ch]pp")
list(APPEND SRC_LIST ${SRC_LIST_TMP})
file(GLOB SRC_LIST_TMP "Framework/ResourceManagement/*.[ch]" "Framework/ResourceManagement/*.[ch]pp")
list(APPEND SRC_LIST ${SRC_LIST_TMP})
file(GLOB SRC_LIST_TMP "Framework/ResourceManagement/NativeInterface/*.[ch]" "Framework/ResourceManagement/NativeInterface/*.[ch]pp")
list(APPEND SRC_LIST ${SRC_LIST_TMP})
file(GLOB SRC_LIST_TMP "Framework/Settings/*.[ch]" "Framework/Settings/*.[ch]pp")
list(APPEND SRC_LIST ${SRC_LIST_TMP})
file(GLOB SRC_LIST_TMP "Framework/Settings/NativeInterface/*.[ch]" "Framework/Settings/NativeInterface/*.[ch]pp")
list(APPEND SRC_LIST ${SRC_LIST_TMP})
file(GLOB SRC_LIST_TMP "Framework/Threading/*.[ch]" "Framework/Threading/*.[ch]pp")
list(APPEND SRC_LIST ${SRC_LIST_TMP})
file(GLOB SRC_LIST_TMP "Implementation/Audio.OpenAL/*.[ch]" "Implementation/Audio.OpenAL/*.[ch]pp")
list(APPEND SRC_LIST ${SRC_LIST_TMP})
#file(GLOB SRC_LIST_TMP "Implementation/Graphics.DirectX/*.[ch]" "Implementation/Graphics.DirectX/*.[ch]pp")
#list(APPEND SRC_LIST ${SRC_LIST_TMP})
file(GLOB SRC_LIST_TMP "Implementation/Graphics.OpenGL/*.[ch]" "Implementation/Graphics.OpenGL/*.[ch]pp")
list(APPEND SRC_LIST ${SRC_LIST_TMP})
file(GLOB SRC_LIST_TMP "ThirdParty/stb_image/*.[ch]" "ThirdParty/stb_image/*.[ch]pp")
list(APPEND SRC_LIST ${SRC_LIST_TMP})
file(GLOB SRC_LIST_TMP "ThirdParty/stb_vorbis/*.[ch]" "ThirdParty/stb_vorbis/*.[ch]pp")
list(APPEND SRC_LIST ${SRC_LIST_TMP})
file(GLOB SRC_LIST_TMP "ThirdParty/TinyXML2/*.[ch]" "ThirdParty/TinyXML2/*.[ch]pp")
list(APPEND SRC_LIST ${SRC_LIST_TMP})
file(GLOB SRC_LIST_TMP "ThirdParty/utf8/*.[ch]" "ThirdParty/utf8/*.[ch]pp")
list(APPEND SRC_LIST ${SRC_LIST_TMP})
file(GLOB SRC_LIST_TMP "ThirdParty/utf8/utf8/*.[ch]" "ThirdParty/utf8/utf8/*.[ch]pp")
list(APPEND SRC_LIST ${SRC_LIST_TMP})

if (ANDROID_NDK)
	file(GLOB SRC_LIST_TMP "Implementation/Core.Android/*.[ch]" "Implementation/Core.Android/*.[ch]pp")
	list(APPEND SRC_LIST ${SRC_LIST_TMP})
	file(GLOB SRC_LIST_TMP "Implementation/Logging.Android/*.[ch]" "Implementation/Logging.Android/*.[ch]pp")
	list(APPEND SRC_LIST ${SRC_LIST_TMP})
	file(GLOB SRC_LIST_TMP "Implementation/ResourceManagement.Android/*.[ch]" "Implementation/ResourceManagement.Android/*.[ch]pp")
	list(APPEND SRC_LIST ${SRC_LIST_TMP})
	file(GLOB SRC_LIST_TMP "Implementation/Settings.Android/*.[ch]" "Implementation/Settings.Android/*.[ch]pp")
	list(APPEND SRC_LIST ${SRC_LIST_TMP})
	file(GLOB SRC_LIST_TMP "Implementation/EntryPoint.Android/*.[ch]" "Implementation/EntryPoint.Android/*.[ch]pp")
	list(APPEND SRC_LIST ${SRC_LIST_TMP})
	file(GLOB SRC_LIST_TMP "ThirdParty/openal.android/include/AL/*.[ch]" "ThirdParty/openal.android/include/AL/*.[ch]pp")
	list(APPEND SRC_LIST ${SRC_LIST_TMP})
elseif(WIN32)
	file(GLOB SRC_LIST_TMP "Implementation/Core.Windows/*.[ch]" "Implementation/Core.Windows/*.[ch]pp")
	list(APPEND SRC_LIST ${SRC_LIST_TMP})
	file(GLOB SRC_LIST_TMP "Implementation/Graphics.OpenGL/Windows/*.[ch]" "Implementation/Graphics.OpenGL/Windows/*.[ch]pp")
	list(APPEND SRC_LIST ${SRC_LIST_TMP})
	file(GLOB SRC_LIST_TMP "Implementation/ResourceManagement.Windows/*.[ch]" "Implementation/ResourceManagement.Windows/*.[ch]pp")
	list(APPEND SRC_LIST ${SRC_LIST_TMP})
	file(GLOB SRC_LIST_TMP "Implementation/Settings.Windows/*.[ch]" "Implementation/Settings.Windows/*.[ch]pp")
	list(APPEND SRC_LIST ${SRC_LIST_TMP})
	file(GLOB SRC_LIST_TMP "Implementation/EntryPoint.Windows/*.[ch]" "Implementation/EntryPoint.Windows/*.[ch]pp")
	list(APPEND SRC_LIST ${SRC_LIST_TMP})
	file(GLOB SRC_LIST_TMP "ThirdParty/freeglut/include/*.[ch]" "ThirdParty/freeglut/include/*.[ch]pp")
	list(APPEND SRC_LIST ${SRC_LIST_TMP})
	file(GLOB SRC_LIST_TMP "ThirdParty/openal.windows/include/AL/*.[ch]" "ThirdParty/openal.windows/include/AL/*.[ch]pp")
	list(APPEND SRC_LIST ${SRC_LIST_TMP})
elseif(UNIX)
	file(GLOB SRC_LIST_TMP "Implementation/Core.Linux/*.[ch]" "Implementation/Core.Linux/*.[ch]pp")
	list(APPEND SRC_LIST ${SRC_LIST_TMP})
	file(GLOB SRC_LIST_TMP "Implementation/ResourceManagement.Linux/*.[ch]" "Implementation/ResourceManagement.Linux/*.[ch]pp")
	list(APPEND SRC_LIST ${SRC_LIST_TMP})
	file(GLOB SRC_LIST_TMP "Implementation/Settings.Linux/*.[ch]" "Implementation/Settings.Linux/*.[ch]pp")
	list(APPEND SRC_LIST ${SRC_LIST_TMP})
	file(GLOB SRC_LIST_TMP "Implementation/EntryPoint.Linux/*.[ch]" "Implementation/EntryPoint.Linux/*.[ch]pp")
	list(APPEND SRC_LIST ${SRC_LIST_TMP})
endif()

add_library(Mogren STATIC ${SRC_LIST})
target_include_directories(Mogren PRIVATE
                           ${ANDROID_NDK}/sources/android/native_app_glue)

if (ANDROID_NDK)						   
	add_subdirectory(ThirdParty/openal.android)
	target_link_libraries(Mogren openal)
endif()
